#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable


#include "CommonFrameData.glsl"
#include "CommonRay.glsl"
#include "CommonSampling.glsl"
#include "CommonLight.glsl"
#include "CommonDepth.glsl"

layout(location = 0) rayPayloadEXT HitPayloadDebug payloadDebug;
layout(location = 1) rayPayloadEXT HitPayloadGI payloadGI;

layout(set = 1, binding = 0) uniform texture2D normalTex;
layout(set = 1, binding = 1) uniform texture2D depthTex;
layout(set = 1, binding = 2) uniform texture2D directLightTex;
// light clustering data
layout(set = 1, binding = 3) readonly buffer ClusterLightsData
{
	uvec2 clusters[32][32][64];
	uint lightIndices[32][32][64][128];
} clusterLightsData;
// lights list data
struct LightInfo
{
	vec4 position;
	vec4 direction;
	vec4 color;
	vec4 rai;
};
layout(set = 1, binding = 4) uniform LightsList
{
	LightInfo lights[1024];
} lightsList;
layout(set = 1, binding = 5) uniform LightsIndices
{
	uvec2 directionalPosition;
	uvec2 spotPosition;
	uvec2 pointPosition;
} lightsIndices;

layout(set = 1, binding = 6) uniform accelerationStructureEXT tlas;
layout(set = 1, binding = 7, rgba16f) uniform image2D lightTex;
layout(set = 1, binding = 8, rgba8) uniform image2D visibilityTextures[32];

layout(set = 2, binding = 0) uniform SamplingPoints
{
//	CoordinateList samplingPoints;
	vec3 coords[1000];
	uint size;
} samplingPoints;

//----------------------------------------------------------------------------------------------------------------------------------

layout(buffer_reference, std430, buffer_reference_align = 4) buffer Grid
{
    uint data[25][25][25][128];
};

layout(buffer_reference, std430, buffer_reference_align = 8) buffer Grids
{
	Grid grid[];
};

layout(set = 2, binding = 1) readonly buffer GridLightsData
{
	uvec4 gridSpecs;
	uint lightsPerCell;
	Grids gridList;
} gridLightsData;

//----------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------

bool CheckAndAccumulateViewSpaceVisibility(vec4 viewSpacePosition, inout vec3 color)
{
	if (viewSpacePosition.z < globalData.cameraNear || viewSpacePosition.z > globalData.cameraFar)
	{
		return false;
	}
	float maxY = viewSpacePosition.z * tan(radians(globalData.cameraFov * 0.5));
	float maxX = maxY * globalData.cameraAspect;

	if (abs(viewSpacePosition.x) > abs(maxX) || abs(viewSpacePosition.y) > abs(maxY))
	{
		return false;
	}

	vec2 halfScreenOffset = vec2(maxY, maxY);
	vec2 uv = (viewSpacePosition.xy + halfScreenOffset) / (halfScreenOffset * 2.0f);

	color = texture(sampler2D(directLightTex, repeatLinearSampler), uv).xyz;

	return true;
}

//----------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------

void main() 
{
	float tMin = 0.1f;
	float tMax = 1000.f;
    uint  rayFlags = gl_RayFlagsOpaqueEXT;

	uint visibility = 0;

	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5, 0.5);
    const vec2 uv = pixelCenter/vec2(gl_LaunchSizeEXT.xy);

	vec2 clusteredUV = (uv + 0.5f * (globalData.clusterScreenOverflow - vec2(1.0f))) / globalData.clusterScreenOverflow;
    uint clusterX = uint(clamp(clusteredUV.x * globalData.numClusters.x, 0, globalData.numClusters.x - 1));
	uint clusterY = uint(clamp(clusteredUV.y * globalData.numClusters.y, 0, globalData.numClusters.y - 1));

	float near = globalData.cameraNear;
	float far = globalData.cameraFar;
	float depth = texture(sampler2D( depthTex, repeatLinearSampler ), uv).r;
	if (depth == 0.0 || depth >= 1.0)
	{
		imageStore(lightTex, ivec2(gl_LaunchIDEXT.xy), vec4(0.0f, 0.0f, 0.0f, 1.0));
		return;
	}

	float linearDepth = near * far / (far + depth * (near - far));
	float height = 2.0 * linearDepth * tan(radians(globalData.cameraFov * 0.5));
	float width = height * globalData.cameraAspect;
	float pixelViewSpaceX = width * (-0.5 + uv.x);
	float pixelViewSpaceY = height * (-0.5 + uv.y);

	vec4 pixelCoordWorld = inverse(globalData.worldToView) * vec4(pixelViewSpaceX, pixelViewSpaceY, -linearDepth, 1.0);
	pixelCoordWorld /= pixelCoordWorld.w;
	uint clusterIndex = clamp(uint(64.0 * log(linearDepth/near) / log(far/near)), 0, 63); // clump it just in case

	uvec2 lightsPositions = clusterLightsData.clusters[clusterX][clusterY][clusterIndex];
	uint directionalCount = (lightsPositions.x >> 8) & 0x000000ff;
	uint directionalOffset = lightsPositions.x & 0x000000ff;
	uint spotCount = (lightsPositions.x >> 24) & 0x000000ff;
	uint spotOffset = (lightsPositions.x >> 16) & 0x000000ff;
	uint pointCount = (lightsPositions.y >> 8) & 0x000000ff;
	uint pointOffset = lightsPositions.y & 0x000000ff;

	vec3 N = normalize( texture( sampler2D( normalTex, repeatLinearSampler ), uv ).xyz );
	vec3 tangent, bitangent;
	CreateCoordinateSystem(N, tangent, bitangent);

	vec3 rayStart = pixelCoordWorld.xyz + (N * 0.05f);

	uint seed = 0;
	vec3 accumulatedLight = vec3(0.0f, 0.0f, 0.0f);

	for (uint idx = 0; idx < samplingPoints.size; ++idx)
	{
		vec3 hemisphereDir = normalize( samplingPoints.coords[idx] );
		vec3 direction = hemisphereDir.x * tangent + hemisphereDir.y * bitangent + hemisphereDir.z * N;
		float surfaceCos = dot(N, direction);
		traceRayEXT(tlas,							// acceleration structure
				rayFlags,							// rayFlags
				0xFF,								// cullMask
				1,									// sbtRecordOffset
				0,									// sbtRecordStride
				0,									// missIndex
				rayStart,							// ray origin
				tMin,								// ray min range
				normalize(direction),				// ray direction
				tMax,								// ray max range
				1									// payload (location = 0)
		);

		if (payloadGI.instanceCustomId == 0xffffffff)
		{
			accumulatedLight += vec3(0.001, 0.0, 0.0);
			continue;
		}

		vec4 hitPointViewSpace = globalData.worldToView * vec4(payloadGI.worldPos, 1.0f);
		hitPointViewSpace /= hitPointViewSpace.w;

		vec3 directColor = vec3(0.0f);
		if (CheckAndAccumulateViewSpaceVisibility(hitPointViewSpace, directColor))
		{
			accumulatedLight += surfaceCos * directColor;
			continue;
		}

//		for ()
//		{
//		}
		
	}

//
//	uint lightIndex = 0;
//	for (uint index = directionalOffset; index < directionalOffset + directionalCount; index++)
//	{
//		if (lightIndex > 31)
//		{
//			return;
//		}
//
//		uint lightIndicesPacked = clusterLightsData.lightIndices[clusterX][clusterY][clusterIndex][index / 2];
//		LightInfo lightInfo = lightsList.lights[UnpackLightIndex(lightIndicesPacked, index)];
//
//		vec3 pixelToLightDir = -lightInfo.direction.xyz;
//		float surfaceCosine = dot(normalize(pixelToLightDir), N);
//
//		if (surfaceCosine >= 0.0f)
//		{
//			isVisible = false;
//		    traceRayEXT(tlas,						// acceleration structure
//				  rayFlags,							// rayFlags
//				  0xFF,								// cullMask
//				  0,								// sbtRecordOffset
//				  0,								// sbtRecordStride
//				  0,								// missIndex
//				  rayStart,							// ray origin
//				  tMin,								// ray min range
//				  normalize(pixelToLightDir.xyz),	// ray direction
//				  tMax,								// ray max range
//				  0									// payload (location = 0)
//			);
//			visibility = WriteVisibility(visibility, index, isVisible);
//		}
//	}
//	for (uint index = spotOffset; index < spotOffset + spotCount; index++)
//	{
//		if (lightIndex > 31)
//		{
//			return;
//		}
//
//		uint lightIndicesPacked = clusterLightsData.lightIndices[clusterX][clusterY][clusterIndex][index / 2];
//		LightInfo lightInfo = lightsList.lights[UnpackLightIndex(lightIndicesPacked, index)];
//
//		vec3 pixelToLightDir = (lightInfo.position - pixelCoordWorld).xyz;
//		float surfaceCosine = dot(normalize(pixelToLightDir), N);
//
//		if (surfaceCosine >= 0.0f)
//		{
//			isVisible = false;
//		    traceRayEXT(tlas,               // acceleration structure
//				  rayFlags,                 // rayFlags
//				  0xFF,                     // cullMask
//				  0,							    // sbtRecordOffset
//				  0,					           // sbtRecordStride
//				  0,					            // missIndex
//				  rayStart,							// ray origin
//				  tMin,						      // ray min range
//				  normalize(pixelToLightDir.xyz),  // ray direction
//				  length(pixelToLightDir),                     // ray max range
//				  0                         // payload (location = 0)
//			);
//			visibility = WriteVisibility(visibility, index, isVisible);
//		}
//	}
//	for (uint index = pointOffset; index < pointOffset + pointCount; index++)
//	{
//		if (lightIndex > 31)
//		{
//			return;
//		}
//
//		uint lightIndicesPacked = clusterLightsData.lightIndices[clusterX][clusterY][clusterIndex][index / 2];
//		LightInfo lightInfo = lightsList.lights[UnpackLightIndex(lightIndicesPacked, index)];
//
//		vec3 pixelToLightDir = (lightInfo.position - pixelCoordWorld).xyz;
//		float surfaceCosine = dot(normalize(pixelToLightDir), N);
//
//		if (surfaceCosine >= 0.0f)
//		{
//			isVisible = false;
//		    traceRayEXT(tlas,               // acceleration structure
//				  rayFlags,                 // rayFlags
//				  0xFF,                     // cullMask
//				  0,							    // sbtRecordOffset
//				  0,					           // sbtRecordStride
//				  0,					            // missIndex
//				  rayStart,							// ray origin
//				  tMin,						      // ray min range
//				  normalize(pixelToLightDir.xyz),  // ray direction
//				  length(pixelToLightDir),                     // ray max range
//				  0                         // payload (location = 0)
//			);
//			visibility = WriteVisibility(visibility, index, isVisible);
//		}
//	}

	imageStore(lightTex, ivec2(gl_LaunchIDEXT.xy), vec4(accumulatedLight, 1.0));
}