#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(set = 0, binding = 0) uniform sampler repeatLinearSampler;
layout(set = 0, binding = 1) uniform sampler repeatMirrorLinearSampler;
layout(set = 0, binding = 2) uniform sampler borderBlackLinearSampler;
layout(set = 0, binding = 3) uniform sampler borderWhiteLinearSampler;
layout(set = 0, binding = 4) uniform ShaderGlobalData
{
	mat4 worldToView;
	mat4 viewToProj;
	vec3 cameraPos;
	vec3 viewVector;
	float time;
	float deltaTime;
	float cameraNear;
	float cameraFar;
	float cameraFov;
	float cameraAspect;
} globalData;

layout(set = 1, binding = 0) uniform texture2D depthTexture;
layout(set = 1, binding = 1, rgba8) uniform image2D storageTex;

// cluster lights indices
layout(set = 1, binding = 2) buffer ClusterLightsData
{
	uvec2 clusters[32][32][64];
	uint lightIndices[32][32][64][128];
} clusterLightsData;

// cluster lights

struct LightInfo
{
	vec4 position;
	vec4 direction;
	vec4 color;
	vec4 rai;
};

layout(set = 1, binding = 3) uniform LightsList
{
	LightInfo lights[1024];
} lightsList;

layout(set = 1, binding = 4) uniform LightsIndices
{
	uvec2 directionalPosition;
	uvec2 spotPosition;
	uvec2 pointPosition;
} lightsIndices;

// shared
shared uint clusterStatus[64];

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

uint Pack16BitIndex(uint lightIndexData, uint lightIndexInCluster, uint lightIndexGlobal)
{
	uint bitOffset = 16 * (lightIndexInCluster % 2);
	// nullify
	lightIndexData &= 0xffff0000 >> bitOffset;
	// set
	lightIndexData |= lightIndexGlobal << bitOffset;

	return lightIndexData;
}

bool IsConeIntersectsSphere(vec3 coneOrigin, vec3 coneDir, float coneLength, float halfAngle, vec4 sphere)
{
    const vec3 centerToCenter = sphere.xyz - coneOrigin;
    const float centersDistanceSqr = dot(centerToCenter, centerToCenter);
	// vector between cone and sphere centers projected onto cone direction, do not forget to normalize coneDir
    const float projectionOnCone = dot(centerToCenter, coneDir);
	// this is simply can be calculated looking at similar triangles, v2 * tan(angle) - v1 * sin(angle) gives us distance to cone border,
	// where v2 is a distance from sphere center to the end of projection vector, which is vector between cone and sphere centers projected on cone direction
    const float distanceToConeBorder = cos(halfAngle) * sqrt(centersDistanceSqr - projectionOnCone*projectionOnCone) - projectionOnCone * sin(halfAngle);
 
    const bool isSphereOutsideConeAngle = distanceToConeBorder > sphere.w;
    const bool isOutsideFront = projectionOnCone > (sphere.w + coneLength);
    const bool isBehindBack  = projectionOnCone < -sphere.w;

	return !(isSphereOutsideConeAngle || isOutsideFront || isBehindBack);
}

void main() {
	if (gl_LocalInvocationIndex == 0)
	{
		for (uint idx = 0; idx < 64; idx++)
		{
			clusterStatus[idx] = 0;
		}
	}
	memoryBarrierShared();

	float near = globalData.cameraNear;
	float far = globalData.cameraFar;

	uvec2 screenRes = textureSize(sampler2D( depthTexture, repeatLinearSampler ), 0);
	vec2 pixelUVHalfSize =  0.5 / vec2(screenRes);
	vec2 tileSize = vec2(screenRes) / vec2(gl_NumWorkGroups.xy);

	uvec2 tileStart = uvec2( vec2(0.5, 0.5) + tileSize * vec2(gl_WorkGroupID.xy) );
	uvec2 tileFinish = uvec2( vec2(0.5, 0.5) + tileSize * (vec2(gl_WorkGroupID.xy) + vec2(1.0, 1.0)) );

	//uint gl_LocalInvocationIndex
	uvec2 tilePixelSize = tileFinish - tileStart;
	uint tilePixelsCount = tilePixelSize.x * tilePixelSize.y;
	if (gl_LocalInvocationIndex >= tilePixelsCount)
	{
		return;
	}

	uint workgroupSize = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
	uint pixelCount = (tilePixelsCount / workgroupSize) + clamp((tilePixelsCount % workgroupSize) / gl_LocalInvocationIndex, 0, 1);

	for (uint index = 0; index < pixelCount; index++)
	{
		uint pixelIndex = gl_LocalInvocationIndex + (index * workgroupSize);
		uvec2 tileCoord = uvec2(pixelIndex % tilePixelSize.x, pixelIndex / tilePixelSize.x);
		vec2 pixelUV = pixelUVHalfSize + vec2(tileStart + tileCoord) / vec2(screenRes);

		float depth = texture(sampler2D( depthTexture, repeatLinearSampler ), pixelUV).r;
		if (depth <= 0.0 || depth >= 1.0)
		{
			continue;
		}

		float linearDepth = 2.0 * near * far / (far + depth * (near - far));
		// depthSlice = near * (far/near) ^ (slice/numSlices) --- pretty good distribution from Doom 2016
		// cluster index = maxClusters * log(linearDepth/near) / log(far/near);
		uint clusterIndex = clamp(uint(64.0 * log(linearDepth/near) / log(far/near)), 0, 63); // clump it for zero based index just in case
		uint nextClusterIndex = clusterIndex + 1;
		uint clusterChecked = atomicOr(clusterStatus[clusterIndex], 1);
		if (clusterChecked != 0)
		{
			continue;
		}

		// TODO: find the light source intersections for this cluster
		// first we find our cluster bounds for AABB. clusters are small so it's an 'okay' approximation

		float clusterNear = near * pow(far/near, float(clusterIndex)/64.0);
		float clusterFar = near * pow(far/near, float(nextClusterIndex)/64.0);

		float fovMultiplier = tan(radians(globalData.cameraFov * 0.5)) * 2.0;
		float nearWidth = clusterNear * fovMultiplier;
		float farWidth = clusterFar * fovMultiplier;
		float reverseAspectRatio = float(screenRes.y) / float(screenRes.x);
		float nearHeight = nearWidth * reverseAspectRatio;
		float farHeight = farWidth * reverseAspectRatio;

		float clusterLeft = max(nearWidth * 0.5 - gl_WorkGroupID.x * nearWidth / 32.0, farWidth * 0.5 - gl_WorkGroupID.x * farWidth / 32.0);
		float clusterRight = min(nearWidth * 0.5 - (gl_WorkGroupID.x + 1) * nearWidth / 32.0, farWidth * 0.5 - (gl_WorkGroupID.x + 1) * farWidth / 32.0);

		float clusterBottom = min(-nearHeight * 0.5 + gl_WorkGroupID.y * nearHeight / 32.0, -farHeight * 0.5 + gl_WorkGroupID.y * farHeight / 32.0);
		float clusterTop = max(-nearHeight * 0.5 + (gl_WorkGroupID.y + 1) * nearHeight / 32.0, -farHeight * 0.5 + (gl_WorkGroupID.y + 1) * farHeight / 32.0);

		// we make an AABB from our cluster frustum and then we make a sphere out of it
		vec4 boundingSphere;
		vec3 clusterExtent1 = vec3(clusterLeft, clusterTop, clusterFar);
		vec3 clusterExtent2 = vec3(clusterRight, clusterBottom, clusterNear);
		vec3 extents = (clusterExtent1 - clusterExtent2) * 0.5;
		boundingSphere.xyz = clusterExtent2 + extents;
		boundingSphere.w = length(extents);

		uint lightIndexInCluster = 0;

		for (uint index = lightsIndices.directionalPosition.x; index < lightsIndices.directionalPosition.x + lightsIndices.directionalPosition.y; index++)
		{
			LightInfo lightInfo = lightsList.lights[index];

			uint entryIndex = lightIndexInCluster / 2;
			uint lightIndexData = clusterLightsData.lightIndices[gl_WorkGroupID.x][gl_WorkGroupID.y][clusterIndex][entryIndex];
			lightIndexData = Pack16BitIndex(lightIndexData, lightIndexInCluster, index);
			clusterLightsData.lightIndices[gl_WorkGroupID.x][gl_WorkGroupID.y][clusterIndex][entryIndex] = lightIndexData;			

			lightIndexInCluster++;
		}
		uint directionalLightOffsetData = clusterLightsData.clusters[gl_WorkGroupID.x][gl_WorkGroupID.y][clusterIndex].x;
		directionalLightOffsetData &= 0xffff0000;
		// offset is always 0
		directionalLightOffsetData |= 0x0000ff00 & (lightIndexInCluster << 8);
		clusterLightsData.clusters[gl_WorkGroupID.x][gl_WorkGroupID.y][clusterIndex].x = directionalLightOffsetData;

		uint spotLightOffset = lightIndexInCluster;
		uint spotLightCount = 0;
		for (uint index = lightsIndices.spotPosition.x; index < lightsIndices.spotPosition.x + lightsIndices.spotPosition.y; index++)
		{
			if (lightIndexInCluster > 255)
			{
				break;
			}

			LightInfo lightInfo = lightsList.lights[index];
			vec3 lightPos = (globalData.worldToView * vec4(lightInfo.position.xyz, 1.0)).xyz * vec3(-1.0, 1.0, -1.0);
			vec3 lightDir = (globalData.worldToView * vec4(lightInfo.direction.xyz, 0.0)).xyz * vec3(-1.0, 1.0, -1.0);

			if (!IsConeIntersectsSphere(lightPos, lightDir, lightInfo.rai.x, radians(lightInfo.rai.y), boundingSphere))
			{
				continue;
			}
			spotLightCount++;

			uint entryIndex = lightIndexInCluster / 2;
			uint lightIndexData = clusterLightsData.lightIndices[gl_WorkGroupID.x][gl_WorkGroupID.y][clusterIndex][entryIndex];
			lightIndexData = Pack16BitIndex(lightIndexData, lightIndexInCluster, index);
			clusterLightsData.lightIndices[gl_WorkGroupID.x][gl_WorkGroupID.y][clusterIndex][entryIndex] = lightIndexData;			

			lightIndexInCluster++;
		}
		uint spotLightOffsetData = clusterLightsData.clusters[gl_WorkGroupID.x][gl_WorkGroupID.y][clusterIndex].x;
		spotLightOffsetData &= 0x0000ffff;
		spotLightOffsetData |= 0x00ff0000 & (spotLightOffset << 16);
		spotLightOffsetData |= 0xff000000 & (spotLightCount << 24);
		clusterLightsData.clusters[gl_WorkGroupID.x][gl_WorkGroupID.y][clusterIndex].x = spotLightOffsetData;

		uint pointLightOffset = lightIndexInCluster;
		uint pointLightCount = 0;
		for (uint index = lightsIndices.pointPosition.x; index < lightsIndices.pointPosition.x + lightsIndices.pointPosition.y; index++)
		{
			if (lightIndexInCluster > 255)
			{
				break;
			}
			LightInfo lightInfo = lightsList.lights[index];
			vec3 lightPos = (globalData.worldToView * vec4(lightInfo.position.xyz, 1.0)).xyz * vec3(-1.0, 1.0, -1.0);

			vec3 lightSphereClippedPos = vec3(clamp(lightPos.x, clusterRight, clusterLeft), clamp(lightPos.y, clusterBottom, clusterTop), clamp(lightPos.z, clusterNear, clusterFar));
			vec3 centerToAABB = lightSphereClippedPos - lightPos;

			if (dot(centerToAABB, centerToAABB) > (lightInfo.rai.x * lightInfo.rai.x))
			{
				continue;
			}
			pointLightCount++;

			uint entryIndex = lightIndexInCluster / 2;
			uint lightIndexData = clusterLightsData.lightIndices[gl_WorkGroupID.x][gl_WorkGroupID.y][clusterIndex][entryIndex];
			lightIndexData = Pack16BitIndex(lightIndexData, lightIndexInCluster, index);
			clusterLightsData.lightIndices[gl_WorkGroupID.x][gl_WorkGroupID.y][clusterIndex][entryIndex] = lightIndexData;

			lightIndexInCluster++;
		}
		uint pointLightOffsetData = clusterLightsData.clusters[gl_WorkGroupID.x][gl_WorkGroupID.y][clusterIndex].y;
		pointLightOffsetData &= 0xffff0000;
		pointLightOffsetData |= 0x000000ff & pointLightOffset;
		pointLightOffsetData |= 0x0000ff00 & (pointLightCount << 8);
		clusterLightsData.clusters[gl_WorkGroupID.x][gl_WorkGroupID.y][clusterIndex].y = pointLightOffsetData;

		vec4 color = vec4(depth, depth, depth, 1.0);
		//imageStore(storageTex, ivec2(pixelUV * vec2(63,63)), color);//vec4(vec3(gl_LocalInvocationID) / vec3(gl_WorkGroupSize), 1.0));
	}
}
